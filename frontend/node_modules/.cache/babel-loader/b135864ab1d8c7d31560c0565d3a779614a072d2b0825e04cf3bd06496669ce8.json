{"ast":null,"code":"const tokenKey = \"user-token\";\n\n// Função para armazenar o token no localStorage\nexport const setToken = token => {\n  // Verifica se o token é válido antes de armazená-lo\n  if (!token || typeof token !== \"string\" || token.trim() === \"\") {\n    throw new Error(\"Token inválido ou vazio.\");\n  }\n  try {\n    localStorage.setItem(tokenKey, token);\n    console.log(\"Token armazenado com sucesso!\");\n  } catch (error) {\n    console.error(\"Erro ao armazenar o token:\", error);\n  }\n};\n\n// Função para recuperar o token do localStorage\nexport const getToken = () => {\n  try {\n    const token = localStorage.getItem(tokenKey);\n    if (!token || token === \"\") {\n      console.warn(\"Token não encontrado ou está vazio.\");\n      return null; // Retorna null se o token não existir ou estiver vazio\n    }\n    return token;\n  } catch (error) {\n    console.error(\"Erro ao recuperar o token:\", error);\n    return null;\n  }\n};\n\n// Função para remover o token do localStorage\nexport const removeToken = () => {\n  try {\n    localStorage.removeItem(tokenKey);\n    console.log(\"Token removido com sucesso.\");\n  } catch (error) {\n    console.error(\"Erro ao remover o token:\", error);\n  }\n};","map":{"version":3,"names":["tokenKey","setToken","token","trim","Error","localStorage","setItem","console","log","error","getToken","getItem","warn","removeToken","removeItem"],"sources":["/Users/yuriloureiro/Projects/web_project_api_full/frontend/src/utils/token.js"],"sourcesContent":["const tokenKey = \"user-token\";\n\n// Função para armazenar o token no localStorage\nexport const setToken = (token) => {\n  // Verifica se o token é válido antes de armazená-lo\n  if (!token || typeof token !== \"string\" || token.trim() === \"\") {\n    throw new Error(\"Token inválido ou vazio.\");\n  }\n  try {\n    localStorage.setItem(tokenKey, token);\n    console.log(\"Token armazenado com sucesso!\");\n  } catch (error) {\n    console.error(\"Erro ao armazenar o token:\", error);\n  }\n};\n\n// Função para recuperar o token do localStorage\nexport const getToken = () => {\n  try {\n    const token = localStorage.getItem(tokenKey);\n    if (!token || token === \"\") {\n      console.warn(\"Token não encontrado ou está vazio.\");\n      return null; // Retorna null se o token não existir ou estiver vazio\n    }\n    return token;\n  } catch (error) {\n    console.error(\"Erro ao recuperar o token:\", error);\n    return null;\n  }\n};\n\n// Função para remover o token do localStorage\nexport const removeToken = () => {\n  try {\n    localStorage.removeItem(tokenKey);\n    console.log(\"Token removido com sucesso.\");\n  } catch (error) {\n    console.error(\"Erro ao remover o token:\", error);\n  }\n};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,YAAY;;AAE7B;AACA,OAAO,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EACjC;EACA,IAAI,CAACA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAC9D,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7C;EACA,IAAI;IACFC,YAAY,CAACC,OAAO,CAACN,QAAQ,EAAEE,KAAK,CAAC;IACrCK,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAC9C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EACpD;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAC5B,IAAI;IACF,MAAMR,KAAK,GAAGG,YAAY,CAACM,OAAO,CAACX,QAAQ,CAAC;IAC5C,IAAI,CAACE,KAAK,IAAIA,KAAK,KAAK,EAAE,EAAE;MAC1BK,OAAO,CAACK,IAAI,CAAC,qCAAqC,CAAC;MACnD,OAAO,IAAI,CAAC,CAAC;IACf;IACA,OAAOV,KAAK;EACd,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,WAAW,GAAGA,CAAA,KAAM;EAC/B,IAAI;IACFR,YAAY,CAACS,UAAU,CAACd,QAAQ,CAAC;IACjCO,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAC5C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;EAClD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}