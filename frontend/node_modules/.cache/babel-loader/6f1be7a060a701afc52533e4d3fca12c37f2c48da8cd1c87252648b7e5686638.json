{"ast":null,"code":"export default class FormValidator {\n  constructor(config, formElement) {\n    this._config = config;\n    this._formElement = formElement;\n    this._inputList = Array.from(this._formElement.querySelectorAll(this._config.inputSelector));\n    this._submitButton = this._formElement.querySelector(this._config.submitButtonSelector);\n    if (!this._submitButton) {\n      console.error('Botão de submit não encontrado!');\n    }\n  }\n\n  // Exibe a mensagem de erro\n  _showInputError(input, errorMessage) {\n    const errorElement = this._formElement.querySelector(`#${input.id}-error`);\n    if (!errorElement) return; // Se o elemento de erro não existir, não faz nada\n    input.classList.add(this._config.inputErrorClass);\n    errorElement.textContent = errorMessage;\n    errorElement.classList.add(this._config.errorClassVisible);\n  }\n\n  // Oculta a mensagem de erro\n  _hideInputError(input) {\n    const errorElement = this._formElement.querySelector(`#${input.id}-error`);\n    if (!errorElement) return; // Se o elemento de erro não existir, não faz nada\n    input.classList.remove(this._config.inputErrorClass);\n    errorElement.classList.remove(this._config.errorClassVisible);\n    errorElement.textContent = '';\n  }\n\n  // Verifica a validade do input e exibe a mensagem de erro\n  _checkInputValidity(input) {\n    const errorElement = this._formElement.querySelector(`#${input.id}-error`);\n    if (!input.validity.valid) {\n      this._showInputError(input, input.validationMessage);\n    } else {\n      this._hideInputError(input);\n    }\n\n    // Checa se o comprimento é válido\n    if (input.value.trim().length === 0 || input.value.trim().length < 2) {\n      this._checkInputLength(input, errorElement);\n    } else {\n      this._hideInputError(input);\n    }\n  }\n\n  // Verifica o comprimento do input\n  _checkInputLength(input, errorElement) {\n    if (!errorElement) return;\n    if (input.value.trim().length === 0) {\n      errorElement.textContent = \"Preencha este campo.\";\n      return false;\n    } else if (input.value.trim().length < 2) {\n      errorElement.textContent = \"O campo deve ter pelo menos 2 caracteres.\";\n      return false;\n    } else {\n      errorElement.textContent = \"\";\n      return true;\n    }\n  }\n\n  // Verifica se algum input é inválido\n  _hasInvalidInput() {\n    return this._inputList.some(input => !input.validity.valid);\n  }\n\n  // Atualiza o estado do botão de submit\n  _toggleButtonState() {\n    if (!this._submitButton) return;\n    if (this._hasInvalidInput()) {\n      this._submitButton.classList.add(this._config.inactiveButtonClass);\n      this._submitButton.setAttribute('disabled', true);\n    } else {\n      this._submitButton.classList.remove(this._config.inactiveButtonClass);\n      this._submitButton.removeAttribute('disabled');\n    }\n  }\n\n  // Define ouvintes de eventos para os inputs\n  _setEventListeners() {\n    this._inputList.forEach(input => {\n      input.addEventListener('input', () => {\n        this._checkInputValidity(input);\n        this._toggleButtonState();\n      });\n    });\n  }\n\n  // Ativa a validação\n  enableValidation() {\n    this._formElement.addEventListener('submit', evt => evt.preventDefault());\n    this._setEventListeners();\n    this._toggleButtonState(); // Estado inicial do botão\n  }\n\n  // Reseta a validação (limpa erros e reabilita o botão)\n  resetValidation() {\n    this._inputList.forEach(input => this._hideInputError(input));\n    this._toggleButtonState();\n  }\n}","map":{"version":3,"names":["FormValidator","constructor","config","formElement","_config","_formElement","_inputList","Array","from","querySelectorAll","inputSelector","_submitButton","querySelector","submitButtonSelector","console","error","_showInputError","input","errorMessage","errorElement","id","classList","add","inputErrorClass","textContent","errorClassVisible","_hideInputError","remove","_checkInputValidity","validity","valid","validationMessage","value","trim","length","_checkInputLength","_hasInvalidInput","some","_toggleButtonState","inactiveButtonClass","setAttribute","removeAttribute","_setEventListeners","forEach","addEventListener","enableValidation","evt","preventDefault","resetValidation"],"sources":["/Users/yuriloureiro/Projects/web_project_api_full/frontend/src/utils/FormValidator.js"],"sourcesContent":["export default class FormValidator {\n  constructor(config, formElement) {\n    this._config = config;\n    this._formElement = formElement;\n    this._inputList = Array.from(this._formElement.querySelectorAll(this._config.inputSelector));\n    this._submitButton = this._formElement.querySelector(this._config.submitButtonSelector);\n\n    if (!this._submitButton) {\n      console.error('Botão de submit não encontrado!');\n    }\n  }\n\n  // Exibe a mensagem de erro\n  _showInputError(input, errorMessage) {\n    const errorElement = this._formElement.querySelector(`#${input.id}-error`);\n    if (!errorElement) return; // Se o elemento de erro não existir, não faz nada\n    input.classList.add(this._config.inputErrorClass);\n    errorElement.textContent = errorMessage;\n    errorElement.classList.add(this._config.errorClassVisible);\n  }\n\n  // Oculta a mensagem de erro\n  _hideInputError(input) {\n    const errorElement = this._formElement.querySelector(`#${input.id}-error`);\n    if (!errorElement) return; // Se o elemento de erro não existir, não faz nada\n    input.classList.remove(this._config.inputErrorClass);\n    errorElement.classList.remove(this._config.errorClassVisible);\n    errorElement.textContent = '';\n  }\n\n  // Verifica a validade do input e exibe a mensagem de erro\n  _checkInputValidity(input) {\n    const errorElement = this._formElement.querySelector(`#${input.id}-error`);\n    if (!input.validity.valid) {\n      this._showInputError(input, input.validationMessage);\n    } else {\n      this._hideInputError(input);\n    }\n\n    // Checa se o comprimento é válido\n    if (input.value.trim().length === 0 || input.value.trim().length < 2) {\n      this._checkInputLength(input, errorElement);\n    } else {\n      this._hideInputError(input);\n    }\n  }\n\n  // Verifica o comprimento do input\n  _checkInputLength(input, errorElement) {\n    if (!errorElement) return;\n\n    if (input.value.trim().length === 0) {\n      errorElement.textContent = \"Preencha este campo.\";\n      return false;\n    } else if (input.value.trim().length < 2) {\n      errorElement.textContent = \"O campo deve ter pelo menos 2 caracteres.\";\n      return false;\n    } else {\n      errorElement.textContent = \"\";\n      return true;\n    }\n  }\n\n  // Verifica se algum input é inválido\n  _hasInvalidInput() {\n    return this._inputList.some((input) => !input.validity.valid);\n  }\n\n  // Atualiza o estado do botão de submit\n  _toggleButtonState() {\n    if (!this._submitButton) return;\n\n    if (this._hasInvalidInput()) {\n      this._submitButton.classList.add(this._config.inactiveButtonClass);\n      this._submitButton.setAttribute('disabled', true);\n    } else {\n      this._submitButton.classList.remove(this._config.inactiveButtonClass);\n      this._submitButton.removeAttribute('disabled');\n    }\n  }\n\n  // Define ouvintes de eventos para os inputs\n  _setEventListeners() {\n    this._inputList.forEach((input) => {\n      input.addEventListener('input', () => {\n        this._checkInputValidity(input);\n        this._toggleButtonState();\n      });\n    });\n  }\n\n  // Ativa a validação\n  enableValidation() {\n    this._formElement.addEventListener('submit', (evt) => evt.preventDefault());\n    this._setEventListeners();\n    this._toggleButtonState();  // Estado inicial do botão\n  }\n\n  // Reseta a validação (limpa erros e reabilita o botão)\n  resetValidation() {\n    this._inputList.forEach((input) => this._hideInputError(input));\n    this._toggleButtonState();\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}