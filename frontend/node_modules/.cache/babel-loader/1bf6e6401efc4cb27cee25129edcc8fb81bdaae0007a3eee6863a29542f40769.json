{"ast":null,"code":"const BASE_URL = \"https://web-project-api-full-daen.onrender.com\";\n\n/*export const signup = async (email, password) => {\n  try {\n\n    const response = await fetch(`${BASE_URL}/users/signup`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    })\n    .then((res) => {\n      if(!res.ok){\n        return Promise.reject(\"400 - um dos campos foi preenchido incorretamente!\")\n      }\n\n      return res.json();\n    })\n};\n\nexport const signin = async (email, password) => {\n  try {\n\n    const response = await fetch(`${BASE_URL}/users/signin`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message);\n    }\n\n    const { token } = await response.json();\n\n    localStorage.setItem(\"jwt\", token);\n    return token;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const checkToken = async (token) => {\n  try {\n    token = localStorage.getItem(\"jwt\");\n    const response = await fetch(`${BASE_URL}/users/me`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};*/\n\nexport const signup = (email, password) => {\n  return fetch(`${BASE_URL}/users/signup`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => {\n    if (!res.ok) {\n      return Promise.reject(\"400 - um dos campos foi preenchido incorretamente\");\n    }\n    return res.json();\n  });\n};\nexport const signin = (email, password) => {\n  return fetch(`${BASE_URL}/users/signin`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => {\n    if (!res.ok) {\n      let errorMessage;\n      switch (res.status) {\n        case 400:\n          errorMessage = \"400 - um ou mais campos não foram fornecidos\";\n          break;\n        case 401:\n          errorMessage = \"401 - o usuário com o e-mail especificado não encontrado\";\n          break;\n        default:\n          errorMessage = \"Erro\";\n      }\n      return Promise.reject(errorMessage);\n    }\n    return res.json();\n  });\n};\nexport const checkToken = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(res => {\n    if (!res.ok) {\n      let errorMessage;\n      switch (res.status) {\n        case 400:\n          errorMessage = \"400 — Token não fornecido ou fornecido em formato errado\";\n          break;\n        case 401:\n          errorMessage = \"401 —  O token fornecido é inválido\";\n          break;\n        default:\n          errorMessage = \"Erro\";\n      }\n      return Promise.reject(errorMessage);\n    }\n    return res.json();\n  });\n};","map":{"version":3,"names":["BASE_URL","signup","email","password","fetch","method","headers","Accept","body","JSON","stringify","then","res","ok","Promise","reject","json","signin","errorMessage","status","checkToken","token","Authorization"],"sources":["/Users/yuriloureiro/Projects/web_project_api_full/frontend/src/utils/auth.js"],"sourcesContent":["const BASE_URL = \"https://web-project-api-full-daen.onrender.com\";\n\n/*export const signup = async (email, password) => {\n  try {\n\n    const response = await fetch(`${BASE_URL}/users/signup`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    })\n    .then((res) => {\n      if(!res.ok){\n        return Promise.reject(\"400 - um dos campos foi preenchido incorretamente!\")\n      }\n\n      return res.json();\n    })\n};\n\nexport const signin = async (email, password) => {\n  try {\n\n    const response = await fetch(`${BASE_URL}/users/signin`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message);\n    }\n\n    const { token } = await response.json();\n\n    localStorage.setItem(\"jwt\", token);\n    return token;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const checkToken = async (token) => {\n  try {\n    token = localStorage.getItem(\"jwt\");\n    const response = await fetch(`${BASE_URL}/users/me`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};*/\n\nexport const signup = (email, password) => {\n  return fetch(`${BASE_URL}/users/signup`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ email, password }),\n  })\n    .then((res) => {\n      if(!res.ok){\n        return Promise.reject(\"400 - um dos campos foi preenchido incorretamente\");\n      }\n      \n      return res.json();\n    })\n};\n\nexport const signin = (email, password) => {\n  return fetch(`${BASE_URL}/users/signin`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ email, password }),\n  }).then((res) => {\n    if(!res.ok){\n      let errorMessage; \n\n      switch(res.status){\n        case 400: \n          errorMessage = \"400 - um ou mais campos não foram fornecidos\";\n          break;\n        case 401:\n          errorMessage = \"401 - o usuário com o e-mail especificado não encontrado\";\n          break;\n        default:\n          errorMessage = \"Erro\";  \n      }\n\n      return Promise.reject(errorMessage);\n    }\n\n    return res.json();\n  });\n};\n\nexport const checkToken = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  }).then((res) => {\n    if(!res.ok){\n      let errorMessage; \n\n      switch(res.status){\n        case 400: \n          errorMessage = \"400 — Token não fornecido ou fornecido em formato errado\";\n          break;\n        case 401:\n          errorMessage = \"401 —  O token fornecido é inválido\";\n          break;\n        default:\n          errorMessage = \"Erro\";  \n      }\n\n      return Promise.reject(errorMessage);\n    }\n\n    return res.json();\n  });\n}\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,gDAAgD;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,MAAM,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACzC,OAAOC,KAAK,CAAC,GAAGJ,QAAQ,eAAe,EAAE;IACvCK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CACCQ,IAAI,CAAEC,GAAG,IAAK;IACb,IAAG,CAACA,GAAG,CAACC,EAAE,EAAC;MACT,OAAOC,OAAO,CAACC,MAAM,CAAC,mDAAmD,CAAC;IAC5E;IAEA,OAAOH,GAAG,CAACI,IAAI,CAAC,CAAC;EACnB,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMC,MAAM,GAAGA,CAACf,KAAK,EAAEC,QAAQ,KAAK;EACzC,OAAOC,KAAK,CAAC,GAAGJ,QAAQ,eAAe,EAAE;IACvCK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CAACQ,IAAI,CAAEC,GAAG,IAAK;IACf,IAAG,CAACA,GAAG,CAACC,EAAE,EAAC;MACT,IAAIK,YAAY;MAEhB,QAAON,GAAG,CAACO,MAAM;QACf,KAAK,GAAG;UACND,YAAY,GAAG,8CAA8C;UAC7D;QACF,KAAK,GAAG;UACNA,YAAY,GAAG,0DAA0D;UACzE;QACF;UACEA,YAAY,GAAG,MAAM;MACzB;MAEA,OAAOJ,OAAO,CAACC,MAAM,CAACG,YAAY,CAAC;IACrC;IAEA,OAAON,GAAG,CAACI,IAAI,CAAC,CAAC;EACnB,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMI,UAAU,GAAIC,KAAK,IAAK;EACnC,OAAOjB,KAAK,CAAC,GAAGJ,QAAQ,WAAW,EAAE;IACnCK,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCe,aAAa,EAAE,UAAUD,KAAK;IAChC;EACF,CAAC,CAAC,CAACV,IAAI,CAAEC,GAAG,IAAK;IACf,IAAG,CAACA,GAAG,CAACC,EAAE,EAAC;MACT,IAAIK,YAAY;MAEhB,QAAON,GAAG,CAACO,MAAM;QACf,KAAK,GAAG;UACND,YAAY,GAAG,0DAA0D;UACzE;QACF,KAAK,GAAG;UACNA,YAAY,GAAG,qCAAqC;UACpD;QACF;UACEA,YAAY,GAAG,MAAM;MACzB;MAEA,OAAOJ,OAAO,CAACC,MAAM,CAACG,YAAY,CAAC;IACrC;IAEA,OAAON,GAAG,CAACI,IAAI,CAAC,CAAC;EACnB,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}