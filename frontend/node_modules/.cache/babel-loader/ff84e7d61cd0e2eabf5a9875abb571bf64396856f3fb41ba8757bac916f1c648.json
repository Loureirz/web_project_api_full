{"ast":null,"code":"const BASE_URL = \"https://web-project-api-full-daen.onrender.com\";\nexport const signup = async (email, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/signup`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message);\n    }\n    const data = await response.json();\n    return data.token;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const signin = async (email, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/signin`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message);\n    }\n    const {\n      token\n    } = await response.json();\n    localStorage.setItem(\"jwt\", token);\n    return token;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const checkToken = async token => {\n  try {\n    const token = localStorage.getItem(\"jwt\");\n    const response = await fetch(`${BASE_URL}/users/me`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","signup","email","password","response","fetch","method","headers","Accept","body","JSON","stringify","ok","errorData","json","Error","message","data","token","error","signin","localStorage","setItem","checkToken","getItem","Authorization"],"sources":["/Users/yuriloureiro/Projects/web_project_api_full/frontend/src/utils/auth.js"],"sourcesContent":["const BASE_URL = \"https://web-project-api-full-daen.onrender.com\";\n\nexport const signup = async (email, password) => {\n  try {\n\n    const response = await fetch(`${BASE_URL}/users/signup`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message);\n    }\n\n    const data = await response.json();\n    return data.token;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const signin = async (email, password) => {\n  try {\n\n    const response = await fetch(`${BASE_URL}/users/signin`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message);\n    }\n\n    const { token } = await response.json();\n\n    localStorage.setItem(\"jwt\", token);\n    return token;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const checkToken = async (token) => {\n  try {\n    const token = localStorage.getItem(\"jwt\");\n    const response = await fetch(`${BASE_URL}/users/me`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,gDAAgD;AAEjE,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC/C,IAAI;IAEF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,QAAQ,eAAe,EAAE;MACvDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1B,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IAGF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,CAAC;IACpC;IAEA,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAOG,IAAI,CAACC,KAAK;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAOlB,KAAK,EAAEC,QAAQ,KAAK;EAC/C,IAAI;IAEF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,QAAQ,eAAe,EAAE;MACvDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IAGF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,CAAC;IACpC;IAEA,MAAM;MAAEE;IAAM,CAAC,GAAG,MAAMd,QAAQ,CAACU,IAAI,CAAC,CAAC;IAEvCO,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEJ,KAAK,CAAC;IAClC,OAAOA,KAAK;EACd,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMI,UAAU,GAAG,MAAOL,KAAK,IAAK;EACzC,IAAI;IACF,MAAMA,KAAK,GAAGG,YAAY,CAACG,OAAO,CAAC,KAAK,CAAC;IACzC,MAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,QAAQ,WAAW,EAAE;MACnDM,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCkB,aAAa,EAAE,UAAUP,KAAK;MAChC;IACF,CAAC,CAAC;IAGF,IAAI,CAACd,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,CAAC;IACpC;IAEA,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAOG,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}